# -*- coding: utf-8 -*-
"""diabetes.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1r9bZ9zBbxvwDhuZdw6626Qp2oQdJ04a8
"""

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

"""**DATA COLLECTION**"""

dataset=pd.read_csv('/content/drive/My Drive/Dataset/diabetes.csv')

dataset.head()

dataset.shape

"""**DATA ANALYSIS**"""

dataset.describe

dataset.info()

dataset.isnull().sum()

dataset["class"].value_counts()

"""**PREPROCESSING**"""

from sklearn.preprocessing import LabelEncoder
LE=LabelEncoder()
dataset["class"]=LE.fit_transform(dataset["class"])

"""**VISUALIZATION**"""

sns.heatmap(dataset.corr(),vmax=1,vmin=-1,annot=True,cmap="Blues")

x=dataset.drop(["class"],axis=True)
y=dataset["class"]

"""**SPLITING THE DATA FOR TRAINING AND TESTING**


"""

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2)

from sklearn.preprocessing import StandardScaler
SS=StandardScaler()
x_train = sc.fit_transform(x_train)
x_test = sc.fit_transform(x_test)

"""**MODELING**

**SUPPORT VECTOR MACHINE**
"""

from sklearn.svm import SVC
model=SVC()
model.fit(x_train,y_train)
model.predict(x_test)
model.score(x_test,y_test)































































































from matplotlib import pyplot as plt
import seaborn as sns

sns.heatmap(dataset.corr(),vmax=1,vmin=-1,annot=True)

# from sklearn.preprocessing import StandardScaler
# sc=StandardScaler()

# dataset['preg']=sc.fit_transform(dataset[['preg']])
# dataset['plas']=sc.fit_transform(dataset[['plas']])
# dataset['mass']=sc.fit_transform(dataset[['mass']])
# dataset['age']=sc.fit_transform(dataset[['age']])

# x=dataset[['preg','plas','mass','age']]
# y=dataset[['class']]
# from sklearn.model_selection import train_test_split
# x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2)

# from sklearn.linear_model import LogisticRegression
# model=LogisticRegression()
# model.fit(x_train,y_train)

# model.score(x_test,y_test)

# y_pred=model.predict(x_test)

# from sklearn.tree import DecisionTreeClassifier
# dt=DecisionTreeClassifier(criterion='entropy')
# dt.fit(x_train,y_train)

# dt.score(x_test,y_test)

# from sklearn.svm import SVC
# sv=SVC()
# sv.fit(x_train,y_train)

# sv.score(x_test,y_test)

# from sklearn.ensemble import  RandomForestClassifier
# rf=RandomForestClassifier(n_estimators=100)
# rf.fit(x_train,y_train)

# rf.score(x_test,y_test)

# from sklearn.neighbors import KNeighborsClassifier
# kn=KNeighborsClassifier(n_neighbors=5)
# kn.fit(x_train,y_train)
# kn.score(x_test,y_test)

# from sklearn.naive_bayes import GaussianNB
# gnb=GaussianNB()
# gnb.fit(x_train,y_train)

# gnb.score(x_test,y_test)

# from sklearn.naive_bayes import MultinomialNB
# mnb=MultinomialNB()
# mnb.fit(x_train,y_train)

# mnb.score(x_test,y_test)

# from sklearn.naive_bayes import BernoulliNB
# bnb=BernoulliNB()
# bnb.fit(x_train,y_train)

# bnb.score(x_test,y_test)

